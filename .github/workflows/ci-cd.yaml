name: CI/CD for Flask App on EKS

on:
  push:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    env:
        REQUIREMENTS_FILE: 'requirements.txt'
    steps:
      - uses: actions/checkout@v3

      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: |
          pip install -r ${{ env.REQUIREMENTS_FILE }}
        working-directory: app  


    #   - name: Run tests
    #     run: |
    #       python -m unittest discover -s app/tests -p 'test_*.py'
    #     working-directory: app 

      - name: Build Docker image
        run: docker build hamidafify/flask-api # Replace placeholders
        working-directory: app

      - name: Login to Docker Hub (if pushing)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image (if pushing)
        run: docker push hamidafify/flask-api  # Replace placeholders

  deploy-to-eks:
    runs-on: ubuntu-latest
    needs: build-test-push  # Wait for the previous job to finish
    environment:
      name: production  # Optional environment name
    steps:
      - uses: actions/checkout@v3

      - name: Install AWS CLI
        run: |
            curl -sL https://raw.githubusercontent.com/aws/aws-cli/v2/installer/linux/x86_64/install-aws-cli.sh | sudo bash
            sudo mv ~/.aws/credentials /tmp/aws_credentials  # Temporarily move credentials
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /tmp/aws_credentials
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /tmp/aws_credentials
            aws configure set region <your-aws-region>  # Replace with your region
            sudo mv /tmp/aws_credentials ~/.aws/credentials  # Move credentials back

      - name: Initialize Terraform
        uses: hashicorp/terraform-action@v2
        with:
          auto-approve: true  # Review Terraform plans manually in production

      - name: Apply Terraform configuration (optional, for EKS cluster deployment)
        uses: hashicorp/terraform-action@v2
        with:
          command: apply
          working-directory: AWS_EKS
      - name:  Deploy Docker image to EKS using kubectl 
        # Replace with your specific deployment approach (omit if using Terraform for EKS)
        run: |
          aws eks update-kubeconfig --name ${{ env.eks_cluster_name  }}
          kubectl create deployment flask-api --image=hamidafify/flask-api
          kubectl expose deploment flask-api --name=flask-svc --type=LoadBalancer --port=80 --target-port=5000
          # Deploy using kubectl 
