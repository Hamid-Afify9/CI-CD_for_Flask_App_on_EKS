name: CI/CD for Flask App on EKS

on:
  push:
    branches: [ main ]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    environment:
        name: test-build
    steps:
      - uses: actions/checkout@v3
      - name: Create virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: |
          pip install -r ${{ vars.REQUIREMENTS_FILE }}
        working-directory: app  


      - name: Run tests
        run: |
          python -m unittest discover -s tests -p 'test_*.py'
        working-directory: app 

      - name: Build Docker image
        run: docker build -t hamidafify/flask-api .
        working-directory: app


      - name: Login to Docker Hub (if pushing)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image (if pushing)
        run: docker push hamidafify/flask-api  

#   deploy-to-eks:
#     runs-on: ubuntu-latest
#     needs: build-test-push  
#     environment:
#       name: production  
#     steps:
#         - name: Checkout code
#           uses: actions/checkout@v3

     
#         - name: Authenticate with AWS
#           uses: aws-actions/configure-aws-credentials@v4
#           with:
#             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#             aws-region: ${{ vars.REGION }}

#         - name: Set up Terraform
#           uses: hashicorp/setup-terraform@v3


#         - name: Initialize Terraform
#           run: terraform init
#           working-directory: AWS_EKS

#         - name: Terraform Plan
#           run: terraform plan
#           working-directory: AWS_EKS
  
#         - name: Terraform Apply
#           run: terraform apply --auto-approve
#           working-directory: AWS_EKS
            
#         - name: Install kubectl
#           uses: azure/setup-kubectl@v2.0
#           with:
#             version: 'v1.24.0'
        
#         - name:  Deploy Docker image to EKS using kubectl 
#           run: |
#             aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME  }} --region ${{ vars.REGION }}
#             kubectl apply -f eks-resourcess/deployment.yaml
#             kubectl get svc flask-svc
#             kubectl get pods
#             kubectl get deployments
  